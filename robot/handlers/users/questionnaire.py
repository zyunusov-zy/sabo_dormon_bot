from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, Message
from aiogram3_calendar.simple_calendar import SimpleCalendar, SimpleCalendarCallback

import re

from aiogram import Router
from aiogram.filters import StateFilter
from robot.states import QuestionnaireStates


router = Router()


@router.message(StateFilter(QuestionnaireStates.ConfirmRules))
async def confirm_rules(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏":
        await message.answer(
            "–ê–Ω–∫–µ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å üìù\n\n1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –§.–ò.–û. –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é (–ø—Ä–∏–º–µ—Ä: Ivanov Ivan Ivanovich):", 
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(QuestionnaireStates.Q1_FullName)
    else:
        await message.answer("‚ö†Ô∏è –í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")


@router.message(StateFilter(QuestionnaireStates.Q1_FullName))
async def questionnaire_full_name(message: types.Message, state: FSMContext):
    await state.update_data(q1_full_name=message.text)

    await message.answer(
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ üìÖ",
        reply_markup=await SimpleCalendar().start_calendar()
    )
    await state.set_state(QuestionnaireStates.Q2_BirthDate)


@router.callback_query(SimpleCalendarCallback.filter(), StateFilter(QuestionnaireStates.Q2_BirthDate))
async def process_simple_calendar(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        await state.update_data(q2_birth_date=date.strftime("%d.%m.%Y"))

        gender_markup = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await callback_query.message.answer("3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–∞—Ü–∏–µ–Ω—Ç–∞:", reply_markup=gender_markup)
        await state.set_state(QuestionnaireStates.Q3_Gender)
        await callback_query.answer()
        

@router.message(StateFilter(QuestionnaireStates.Q3_Gender))
async def questionnaire_gender(message: types.Message, state: FSMContext):
    gender = message.text.lower()
    if gender not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –ú—É–∂—Å–∫–æ–π –∏–ª–∏ –ñ–µ–Ω—Å–∫–∏–π.")
        return

    await state.update_data(q3_gender=gender.capitalize())

    await message.answer("4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(QuestionnaireStates.Q4_PhoneNumber)


@router.message(StateFilter(QuestionnaireStates.Q4_PhoneNumber))
async def questionnaire_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not re.match(r"^\+?\d{9,15}$", phone):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +998901234567).")
        return

    await state.update_data(q4_phone_number=phone)
    await message.answer("5Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram username (–Ω–∞—á–∏–Ω–∞—è —Å @):")
    await state.set_state(QuestionnaireStates.Q5_TelegramUsername)


regions = ["–¢–∞—à–∫–µ–Ω—Ç", "–°–∞–º–∞—Ä–∫–∞–Ω–¥", "–§–µ—Ä–≥–∞–Ω–∞", "–ê–Ω–¥–∏–∂–∞–Ω", "–ë—É—Ö–∞—Ä–∞", "–•–æ—Ä–µ–∑–º", "–ù–∞–≤–æ–∏", "–ù–∞–º–∞–Ω–≥–∞–Ω", "–ö–∞—à–∫–∞–¥–∞—Ä—å—è", "–°—É—Ä—Ö–∞–Ω–¥–∞—Ä—å—è", "–°—ã—Ä–¥–∞—Ä—å—è", "–î–∂–∏–∑–∞–∫", "–ö–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å—Ç–∞–Ω"]

@router.message(StateFilter(QuestionnaireStates.Q5_TelegramUsername))
async def questionnaire_telegram(message: types.Message, state: FSMContext):
    username = message.text.strip()
    if not re.match(r"^@[\w\d_]{5,}$", username):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram username, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å @.")
        return

    await state.update_data(q5_telegram_username=username)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=region)] for region in regions],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("6Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–ø–∏—Å–∫–∏ üìç:", reply_markup=keyboard)
    await state.set_state(QuestionnaireStates.Q6_Region)
    

@router.message(StateFilter(QuestionnaireStates.Q6_Region))
async def questionnaire_region(message: types.Message, state: FSMContext):
    await state.update_data(q6_region=message.text)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–°–∞–º(–∞)")], [KeyboardButton(text="–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("7Ô∏è‚É£ –ö—Ç–æ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è?", reply_markup=keyboard)
    await state.set_state(QuestionnaireStates.Q7_WhoApplies)


@router.message(StateFilter(QuestionnaireStates.Q7_WhoApplies))
async def questionnaire_who_applies(message: types.Message, state: FSMContext):
    await state.update_data(q7_who_applies=message.text)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞")],
            [KeyboardButton(text="–ù–µ—Ç")],
            [KeyboardButton(text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("8Ô∏è‚É£ –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–º –°–∞–±–æ-–î–∞—Ä–º–æ–Ω?", reply_markup=keyboard)
    await state.set_state(QuestionnaireStates.Q8_SaboPatient)


@router.message(StateFilter(QuestionnaireStates.Q8_SaboPatient))
async def questionnaire_is_sabodarmon(message: types.Message, state: FSMContext):
    answer = message.text.strip()
    if answer not in ["–î–∞", "–ù–µ—Ç", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    await state.update_data(q8_is_sabodarmon=answer)

    source_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="Telegram"), KeyboardButton(text="Instagram")],
            [KeyboardButton(text="–ö–ª–∏–Ω–∏–∫–∞"), KeyboardButton(text="–ó–Ω–∞–∫–æ–º—ã–µ")],
            [KeyboardButton(text="–î—Ä—É–≥–æ–µ")]
        ],
        resize_keyboard=True, 
        one_time_keyboard=True
    )

    await message.answer("9Ô∏è‚É£ –û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ?", reply_markup=source_kb)
    await state.set_state(QuestionnaireStates.Q9_HowFound)


@router.message(StateFilter(QuestionnaireStates.Q9_HowFound))
async def questionnaire_source_info(message: types.Message, state: FSMContext):
    source = message.text.strip()
    valid = ["Telegram", "Instagram", "–ö–ª–∏–Ω–∏–∫–∞", "–ó–Ω–∞–∫–æ–º—ã–µ", "–î—Ä—É–≥–æ–µ"]
    if source not in valid:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    await state.update_data(q9_source_info=source)

    diagnosis_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
        ],
        resize_keyboard=True, 
        one_time_keyboard=True
    )

    await message.answer("üîü –ï—Å—Ç—å –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑?", reply_markup=diagnosis_kb)
    await state.set_state(QuestionnaireStates.Q10_HasDiagnosis)


@router.message(StateFilter(QuestionnaireStates.Q10_HasDiagnosis))
async def questionnaire_has_diagnosis(message: types.Message, state: FSMContext):
    answer = message.text.strip()
    if answer not in ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    await state.update_data(q10_has_diagnosis=answer)

    if answer == "‚úÖ –î–∞":
        await message.answer("üìù –£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑ –ø–∞—Ü–∏–µ–Ω—Ç–∞:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(QuestionnaireStates.Q11_DiagnosisText)
    else:
        await message.answer("üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É...", reply_markup=ReplyKeyboardRemove())
        await state.set_state(QuestionnaireStates.Q13_Complaint)
        await message.answer("üîî –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –∂–∞–ª–æ–±—É / –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è:")


@router.message(StateFilter(QuestionnaireStates.Q11_DiagnosisText))
async def questionnaire_diagnosis_text(message: types.Message, state: FSMContext):
    await state.update_data(q11_diagnosis_text=message.text)

    await message.answer("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/—Å–∫–∞–Ω –¥–∏–∞–≥–Ω–æ–∑–∞ –∏–ª–∏ —ç–ø–∏–∫—Ä–∏–∑–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é).")
    await state.set_state(QuestionnaireStates.Q12_DiagnosisFile)


@router.message(F.content_type == types.ContentType.DOCUMENT, StateFilter(QuestionnaireStates.Q12_DiagnosisFile))
@router.message(F.content_type == types.ContentType.PHOTO, StateFilter(QuestionnaireStates.Q12_DiagnosisFile))
async def questionnaire_diagnosis_file(message: types.Message, state: FSMContext):
    file_id = message.document.file_id if message.document else message.photo[-1].file_id
    await state.update_data(q12_diagnosis_file_id=file_id)

    await message.answer("‚úÖ –î–∏–∞–≥–Ω–æ–∑ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω!\n\nüîî –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –∂–∞–ª–æ–±—É / –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è:")
    await state.set_state(QuestionnaireStates.Q13_Complaint)


@router.message(StateFilter(QuestionnaireStates.Q13_Complaint))
async def questionnaire_complaint(message: types.Message, state: FSMContext):
    await state.update_data(q13_complaint=message.text)

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ë–æ–ª—å"), KeyboardButton(text="–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–Ω–∞")],
            [KeyboardButton(text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å"), KeyboardButton(text="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–∏")],
            [KeyboardButton(text="–î—Ä—É–≥–æ–µ")]
        ],
        resize_keyboard=True, 
        one_time_keyboard=True
    )

    await message.answer("1Ô∏è‚É£4Ô∏è‚É£ –ß—Ç–æ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞–º –Ω–∞–∏–±–æ–ª—å—à–∏–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π –±–æ–ª–µ–∑–Ω–∏?", reply_markup=kb)
    await state.set_state(QuestionnaireStates.Q14_MainDiscomfort)


@router.message(StateFilter(QuestionnaireStates.Q14_MainDiscomfort))
async def questionnaire_main_discomfort(message: types.Message, state: FSMContext):
    answer = message.text.strip()
    options = ["–ë–æ–ª—å", "–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–Ω–∞", "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å", "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–∏", "–î—Ä—É–≥–æ–µ"]
    if answer not in options:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    if answer == "–î—Ä—É–≥–æ–µ":
        await message.answer("üìù –£—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –º–µ—à–∞–µ—Ç:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(QuestionnaireStates.Q14_MainDiscomfortOther)
    else:
        await state.update_data(q14_main_discomfort=answer)
        await proceed_to_q15(message, state)


@router.message(StateFilter(QuestionnaireStates.Q14_MainDiscomfortOther))
async def questionnaire_main_discomfort_other(message: types.Message, state: FSMContext):
    await state.update_data(q14_main_discomfort=f"–î—Ä—É–≥–æ–µ: {message.text}")
    await proceed_to_q15(message, state)


async def proceed_to_q15(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚òëÔ∏è –°–º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å / —É—á–∏—Ç—å—Å—è"), KeyboardButton(text="‚òëÔ∏è –°–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")],
            [KeyboardButton(text="‚òëÔ∏è –£–º–µ–Ω—å—à–∏—Ç—Å—è –±–æ–ª—å"), KeyboardButton(text="‚òëÔ∏è –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π")],
            [KeyboardButton(text="‚òëÔ∏è –£–ª—É—á—à–∏—Ç—Å—è —Å–æ–Ω / —ç–Ω–µ—Ä–≥–∏—è"), KeyboardButton(text="‚òëÔ∏è –î—Ä—É–≥–æ–µ")],
            [KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "1Ô∏è‚É£5Ô∏è‚É£ –ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ –ª–µ—á–µ–Ω–∏—è?\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å—ë, —á—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ –æ–¥–Ω–æ–º—É –ø—É–Ω–∫—Ç—É. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ì–æ—Ç–æ–≤–æ.",
        reply_markup=kb
    )
    await state.update_data(q15_improvements=[])
    await state.set_state(QuestionnaireStates.Q15_ImprovementsAfterTreatment)


@router.message(StateFilter(QuestionnaireStates.Q15_ImprovementsAfterTreatment))
async def questionnaire_improvements(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        data = await state.get_data()
        selected = data.get("q15_improvements", [])
        if not selected:
            await message.answer("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—É–Ω–∫—Ç.")
            return
        await proceed_to_q16(message, state)
        return

    valid_options = [
        "‚òëÔ∏è –°–º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å / —É—á–∏—Ç—å—Å—è", "‚òëÔ∏è –°–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
        "‚òëÔ∏è –£–º–µ–Ω—å—à–∏—Ç—Å—è –±–æ–ª—å", "‚òëÔ∏è –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π",
        "‚òëÔ∏è –£–ª—É—á—à–∏—Ç—Å—è —Å–æ–Ω / —ç–Ω–µ—Ä–≥–∏—è", "‚òëÔ∏è –î—Ä—É–≥–æ–µ"
    ]
    if text not in valid_options:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return

    data = await state.get_data()
    selected = data.get("q15_improvements", [])
    if text in selected:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø—É–Ω–∫—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω.")
    else:
        selected.append(text)
        await state.update_data(q15_improvements=selected)
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {text}")


async def proceed_to_q16(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚òëÔ∏è –£—Ö—É–¥—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"), KeyboardButton(text="‚òëÔ∏è –ü–æ—Ç–µ—Ä—è —Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")],
            [KeyboardButton(text="‚òëÔ∏è –†–∏—Å–∫ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏"), KeyboardButton(text="‚òëÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")],
            [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "1Ô∏è‚É£6Ô∏è‚É£ –ß—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ –Ω–µ –ª–µ—á–∏—Ç—å—Å—è?\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å—ë, —á—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ –æ–¥–Ω–æ–º—É –ø—É–Ω–∫—Ç—É. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä.",
        reply_markup=kb
    )
    await state.update_data(q16_consequences=[])
    await state.set_state(QuestionnaireStates.Q16_WithoutTreatmentConsequences)


@router.message(StateFilter(QuestionnaireStates.Q16_WithoutTreatmentConsequences))
async def questionnaire_consequences(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä":
        data = await state.get_data()
        selected = data.get("q16_consequences", [])
        if not selected:
            await message.answer("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—É–Ω–∫—Ç.")
            return
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º...", reply_markup=ReplyKeyboardRemove())
        await proceed_to_q17(message, state)
        return

    valid_options = [
        "‚òëÔ∏è –£—Ö—É–¥—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è", "‚òëÔ∏è –ü–æ—Ç–µ—Ä—è —Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
        "‚òëÔ∏è –†–∏—Å–∫ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏", "‚òëÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    ]
    if text not in valid_options:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return

    data = await state.get_data()
    selected = data.get("q16_consequences", [])
    if text in selected:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø—É–Ω–∫—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω.")
    else:
        selected.append(text)
        await state.update_data(q16_consequences=selected)
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {text}")


async def proceed_to_q17(message: types.Message, state: FSMContext):
    options = ["‚òëÔ∏è –î–∞, –µ—Å—Ç—å", "‚òëÔ∏è –ù–µ—Ç, –Ω–æ –º–æ–∂–µ–º –≤–∑—è—Ç—å", "‚òëÔ∏è –ù–µ—Ç"]
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=option)] for option in options],
        resize_keyboard=True, 
        one_time_keyboard=True
    )
    await message.answer("üìÑ –ï—Å—Ç—å –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω—É–∂–¥–∞–µ–º–æ—Å—Ç–∏ –æ—Ç –º–∞—Ö–∞–ª–ª–∏ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –æ—Ä–≥–∞–Ω–æ–≤?", reply_markup=kb)
    await state.set_state(QuestionnaireStates.Q17_NeedConfirmationDocs)


@router.message(StateFilter(QuestionnaireStates.Q17_NeedConfirmationDocs))
async def questionnaire_need_docs(message: types.Message, state: FSMContext):
    options = ["‚òëÔ∏è –î–∞, –µ—Å—Ç—å", "‚òëÔ∏è –ù–µ—Ç, –Ω–æ –º–æ–∂–µ–º –≤–∑—è—Ç—å", "‚òëÔ∏è –ù–µ—Ç"]
    if message.text not in options:
        await proceed_to_q17(message, state)
        return

    await state.update_data(q17_need_confirmation=message.text)
    await message.answer("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç: —Å–ø—Ä–∞–≤–∫—É –æ –Ω—É–∂–¥–∞–µ–º–æ—Å—Ç–∏, '—Ç–µ–º–∏—Ä –¥–∞—Ñ—Ç–∞—Ä' –∏ —Ç.–ø. (—Ñ–æ—Ç–æ –∏–ª–∏ PDF).", reply_markup=ReplyKeyboardRemove())
    await state.set_state(QuestionnaireStates.Q17_ConfirmationFile)


@router.message(F.content_type == types.ContentType.DOCUMENT, StateFilter(QuestionnaireStates.Q17_ConfirmationFile))
async def questionnaire_confirm_doc(message: types.Message, state: FSMContext):
    file_id = message.document.file_id
    await state.update_data(q17_confirmation_file=file_id)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω.\n\nüìä –£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –≤–∞—à–µ–π —Å–µ–º—å–∏ –≤ –º–µ—Å—è—Ü:")
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ 5 –º–ª–Ω"), KeyboardButton(text="5‚Äì7 –º–ª–Ω")],
            [KeyboardButton(text="7‚Äì10 –º–ª–Ω"), KeyboardButton(text="10+ –º–ª–Ω")]
        ],
        resize_keyboard=True, 
        one_time_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=kb)
    await state.set_state(QuestionnaireStates.Q18_AvgIncome)


@router.message(StateFilter(QuestionnaireStates.Q18_AvgIncome))
async def questionnaire_avg_income(message: types.Message, state: FSMContext):
    options = ["–î–æ 5 –º–ª–Ω", "5‚Äì7 –º–ª–Ω", "7‚Äì10 –º–ª–Ω", "10+ –º–ª–Ω"]
    if message.text not in options:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    await state.update_data(q18_avg_income=message.text)
    await message.answer("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (—Å–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö, –≤—ã–ø–∏—Å–∫–∞ –∏ —Ç.–ø.).", reply_markup=ReplyKeyboardRemove())
    await state.set_state(QuestionnaireStates.Q18_IncomeDoc)


@router.message(F.content_type == types.ContentType.DOCUMENT, StateFilter(QuestionnaireStates.Q18_IncomeDoc))
async def questionnaire_income_doc(message: types.Message, state: FSMContext):
    file_id = message.document.file_id
    await state.update_data(q18_income_doc=file_id)

    await message.answer("üë∂ –°–∫–æ–ª—å–∫–æ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö –¥–µ—Ç–µ–π –≤ —Å–µ–º—å–µ?")
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="0"), KeyboardButton(text="1"), KeyboardButton(text="2")],
            [KeyboardButton(text="3"), KeyboardButton(text="4"), KeyboardButton(text="5+")]
        ],
        resize_keyboard=True, 
        one_time_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:", reply_markup=kb)
    await state.set_state(QuestionnaireStates.Q19_ChildrenCount)


@router.message(StateFilter(QuestionnaireStates.Q19_ChildrenCount))
async def questionnaire_children_count(message: types.Message, state: FSMContext):
    if message.text not in ["0", "1", "2", "3", "4", "5+"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return

    await state.update_data(q19_children_count=message.text)
    if message.text != "0":
        await message.answer("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤).", reply_markup=ReplyKeyboardRemove())
        await state.set_state(QuestionnaireStates.Q19_ChildrenDocs)
    else:
        await proceed_to_q20(message, state)


@router.message(F.content_type == types.ContentType.DOCUMENT, StateFilter(QuestionnaireStates.Q19_ChildrenDocs))
async def questionnaire_children_docs(message: types.Message, state: FSMContext):
    file_id = message.document.file_id
    data = await state.get_data()
    children_docs = data.get("q19_children_docs", [])
    children_docs.append(file_id)
    await state.update_data(q19_children_docs=children_docs)

    await message.answer("‚úÖ –ú–µ—Ç—Ä–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞.")
    await proceed_to_q20(message, state)


async def proceed_to_q20(message: types.Message, state: FSMContext):
    options = ["‚òëÔ∏è –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ", "‚òëÔ∏è –ê—Ä–µ–Ω–¥–∞", "‚òëÔ∏è –£ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤"]
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=option)] for option in options],
        resize_keyboard=True, 
        one_time_keyboard=True
    )

    await message.answer("üè† –ö–∞–∫–æ–π —É –≤–∞—Å —Ç–∏–ø –∂–∏–ª—å—è?", reply_markup=kb)
    await state.set_state(QuestionnaireStates.Q20_HousingType)


@router.message(StateFilter(QuestionnaireStates.Q20_HousingType))
async def questionnaire_housing_type(message: types.Message, state: FSMContext):
    options = ["‚òëÔ∏è –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ", "‚òëÔ∏è –ê—Ä–µ–Ω–¥–∞", "‚òëÔ∏è –£ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤"]
    if message.text not in options:
        await proceed_to_q20(message, state)
        return

    await state.update_data(q20_housing_type=message.text)

    if message.text == "‚òëÔ∏è –ê—Ä–µ–Ω–¥–∞":
        await message.answer("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç.", reply_markup=ReplyKeyboardRemove())
        await state.set_state(QuestionnaireStates.Q20_HousingDoc)
    else:
        await proceed_to_q21(message, state)


@router.message(F.content_type == types.ContentType.DOCUMENT, StateFilter(QuestionnaireStates.Q20_HousingDoc))
async def questionnaire_housing_doc(message: types.Message, state: FSMContext):
    file_id = message.document.file_id
    await state.update_data(q20_housing_doc=file_id)

    await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ –∂–∏–ª—å—é –ø–æ–ª—É—á–µ–Ω.")
    await proceed_to_q21(message, state)


async def proceed_to_q21(message: types.Message, state: FSMContext):
    await message.answer("üí∞ –î–æ –∫–∞–∫–æ–π —Å—É–º–º—ã –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ª–µ—á–µ–Ω–∏–µ? (–≤ —Å—É–º–∞—Ö)", reply_markup=ReplyKeyboardRemove())
    await state.set_state(QuestionnaireStates.Q21_WhoWorksInFamily)


@router.message(StateFilter(QuestionnaireStates.Q20_HousingDoc))
async def questionnaire_contribution(message: types.Message, state: FSMContext):
    amount = message.text.strip().replace(" ", "")
    if not amount.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å—É–º–º—É –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.")
        return

    await state.update_data(q21_contribution=amount)
    await message.answer(
        "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –≤–∞—à–∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é).\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥, –æ—Ç–ø—Ä–∞–≤–∏–≤ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–∞–π–ª–∞."
    )
    await state.set_state(QuestionnaireStates.Q22_AdditionalFile)

@router.message(F.content_type == types.ContentType.DOCUMENT, StateFilter(QuestionnaireStates.Q22_AdditionalFile))
async def questionnaire_additional_file(message: types.Message, state: FSMContext):
    file_id = message.document.file_id
    await state.update_data(q22_additional_file=file_id)

    await message.answer("üìù –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –°-–î –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ?")
    await state.set_state(QuestionnaireStates.Q23_FinalComment)


@router.message(StateFilter(QuestionnaireStates.Q22_AdditionalFile))
async def skip_additional_file(message: types.Message, state: FSMContext):
    await state.update_data(q22_additional_file=None)
    await message.answer("üìù –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –°-–î –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ?")
    await state.set_state(QuestionnaireStates.Q23_FinalComment)

@router.message(StateFilter(QuestionnaireStates.Q23_FinalComment))
async def questionnaire_final_comment(message: Message, state: FSMContext):
    await state.update_data(q23_final_comment=message.text)

    data = await state.get_data()
    summary = (
        "‚úÖ –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üë§ –§–ò–û: {data.get('q1_full_name')}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data.get('q2_birth_date')}\n"
        f"üßë –ü–æ–ª: {data.get('q3_gender')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('q4_phone_number')}\n"
        f"üì≤ Telegram: {data.get('q5_telegram_username')}\n"
        f"üè† –ñ–∏–ª—å—ë: {data.get('q20_housing_type')}\n"
        f"üí∞ –û–ø–ª–∞—Ç–∞: {data.get('q21_contribution')} —Å—É–º\n"
        f"üìÑ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('q23_final_comment')}\n\n"
        "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏!"
    )

    await message.answer(summary)
    await state.clear()