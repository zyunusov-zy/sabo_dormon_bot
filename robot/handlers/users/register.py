from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from asgiref.sync import sync_to_async
from django.utils import timezone
from datetime import timedelta
from django.utils.timezone import now

from robot.states import RegisterStates, QuestionnaireStates
from robot.models import BotUser, Patient
from robot.utils.misc.logging import logger, log_user_action, log_state_change, log_handler, log_error



router = Router()


@router.message(RegisterStates.confirm_honesty, F.text == "‚úÖ –Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —á–µ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
@log_handler
async def confirm_honesty(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    log_user_action(
        user_id=user_id,
        action="Confirmed honesty",
        state="RegisterStates.confirm_honesty"
    )
    try:
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏—Ç–µ –§.–ò.–û. (Ivanov Ivan Ivanovich):", reply_markup=ReplyKeyboardRemove())
        
        old_state = await state.get_state()
        await state.set_state(RegisterStates.full_name)
        log_state_change(user_id, old_state, "RegisterStates.full_name")
        
    except Exception as e:
        log_error(user_id, e, "confirm_honesty handler", "RegisterStates.confirm_honesty")
        raise

@log_handler
async def deny_honesty(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    log_user_action(
        user_id=user_id,
        action="Denied honesty - session terminated",
        state="RegisterStates.confirm_honesty",
        extra_data=f"Message: {message.text}"
    )
    
    try:
        await message.answer("‚ùå –ë–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç —Ä–∞–±–æ—Ç—É.")
        await state.clear()
        
        logger.warning(f"User {user_id} denied honesty agreement - session cleared")
        
    except Exception as e:
        log_error(user_id, e, "deny_honesty handler", "RegisterStates.confirm_honesty")
        raise



@router.message(RegisterStates.full_name)
async def get_fullname_and_ask_phone(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    full_name = message.text.strip()
    
    log_user_action(
        user_id=user_id,
        action="Provided full name",
        state="RegisterStates.full_name",
        extra_data=f"Name: {full_name}"
    )
    
    try:
        await state.update_data(full_name=full_name)
        
        await message.answer(
            "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        
        old_state = await state.get_state()
        await state.set_state(RegisterStates.phone_number)
        log_state_change(user_id, old_state, "RegisterStates.phone_number")
        
    except Exception as e:
        log_error(user_id, e, "get_fullname_and_ask_phone handler", "RegisterStates.full_name")
        raise

async def can_register_new_patient():
    today = now().date()
    count_today = await sync_to_async(
        lambda: BotUser.objects.filter(created_at__date=today).count()
    )()
    return count_today < 20

@router.message(RegisterStates.phone_number, F.contact)
async def get_phone_number_and_confirm_rules(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    contact = message.contact
    phone_number = contact.phone_number

    log_user_action(
        user_id=user_id,
        action="Provided phone number",
        state="RegisterStates.phone_number",
        extra_data=f"Phone: {phone_number}"
    )

    try:
        await state.update_data(phone_number=phone_number)
        user_data = await state.get_data()
        full_name = user_data.get("full_name")
        telegram_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_user = await sync_to_async(BotUser.objects.filter(
            telegram_id=telegram_id,
            phone_number=phone_number
        ).first)()

        if existing_user:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ü–∏–µ–Ω—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω)
            try:
                existing_patient = await sync_to_async(lambda: existing_user.patient)()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É
                can_register = await sync_to_async(existing_patient.can_register_again)()
                
                if not can_register:
                    if existing_patient.is_fully_approved:
                        # –û–¥–æ–±—Ä–µ–Ω –º–µ–Ω–µ–µ 7 –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥
                        months_left = 7 - ((timezone.now() - existing_patient.approved_at).days // 30)
                        await message.answer(
                            f"‚ùó–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–µ {existing_patient.approved_at.strftime('%d.%m.%Y')}.\n"
                            f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–∞—á–∞ –∞–Ω–∫–µ—Ç—ã –≤–æ–∑–º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ {months_left} –º–µ—Å—è—Ü–µ–≤."
                        )
                        return
                    else:
                        # –ê–Ω–∫–µ—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
                        await message.answer(
                            "‚ùó–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. "
                            "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π."
                        )
                        return
                else:
                    if existing_patient.is_rejected:
                        await message.answer(
                            "‚ùó–†–∞–Ω–µ–µ –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
                            "–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –æ–¥–Ω–∞–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–∏–∞–≥–Ω–æ–∑, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.\n–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ."
                        )
                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
                        await sync_to_async(existing_patient.delete)()
                    elif existing_patient.is_fully_approved:
                        await message.answer(
                            "‚úÖ –ü—Ä–æ—à–ª–æ 7 –º–µ—Å—è—Ü–µ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è. "
                            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É."
                        )
                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
                        await sync_to_async(existing_patient.delete)()
                        
            except Patient.DoesNotExist:
                # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
                await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∫–µ—Ç–µ.")
        else:
            can_register_today = await can_register_new_patient()
            if not can_register_today:
                await message.answer(
                    "‚ùó –°–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞."
                )
                return

            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            await sync_to_async(BotUser.objects.create)(
                telegram_id=telegram_id,
                full_name=full_name,
                phone_number=phone_number
            )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∫–µ—Ç–µ
        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ!\n\n"
            "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —á–µ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö –≤–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö:\n"
            "üîí –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ.\n\n"
            "‚òê –Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —è —É–∫–∞–∂—É –≤ —ç—Ç–æ–π –∞–Ω–∫–µ—Ç–µ, –±—É–¥—É—Ç —á–µ—Å—Ç–Ω—ã–º–∏, –ø—Ä–∞–≤–¥–∏–≤—ã–º–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n"
            "‚òê –Ø –æ—Å–æ–∑–Ω–∞—é, —á—Ç–æ –ª—é–±–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±–º–∞–Ω–∞, —Ñ–∞–ª—å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–µ –∏—Å–∫–∞–∂–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–º—É –æ—Ç–∫–∞–∑—É –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –∫–∞–∫ —Å–µ–π—á–∞—Å, —Ç–∞–∫ –∏ –≤ –±—É–¥—É—â–µ–º.\n\n"
            "üìÑ –ß–µ–º –±–æ–ª—å—à–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç–µ, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø–æ–º–æ—â–∏.\n\n"
            "‚è±Ô∏è –°—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∫–µ—Ç—ã: –¥–æ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. –í —Å–ª—É—á–∞–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∫–ª–∏–Ω–∏–∫–∞ –∏–ª–∏ –±–æ—Ç.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )

        old_state = await state.get_state()
        await state.set_state(QuestionnaireStates.ConfirmRules)
        log_state_change(user_id, old_state, "QuestionnaireStates.ConfirmRules")

        logger.info(f"User {user_id} successfully processed registration and moved to questionnaire")

    except Exception as e:
        log_error(user_id, e, "get_phone_number_and_confirm_rules handler", "RegisterStates.phone_number")
        raise