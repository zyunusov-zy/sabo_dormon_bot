import os
import io
from dotenv import load_dotenv
from google.oauth2.service_account import Credentials as ServiceAccountCredentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload
from aiogram import Bot
from googleapiclient.errors import HttpError
from robot.utils.misc.logging import log_handler, log_user_action, log_state_change, log_error, log_file_operation

load_dotenv(dotenv_path=".env", override=True)

SCOPES = ['https://www.googleapis.com/auth/drive.file']
SERVICE_ACCOUNT_PATH = os.getenv('GOOGLE_DRIVE_SERVICE_ACCOUNT_PATH')
PARENT_FOLDER_ID = os.getenv("GOOGLE_DRIVE_PARENT_FOLDER_ID")


# print("[DEBUG] FOLDER_ID: ", PARENT_FOLDER_ID)
# print("[DEBUG] ACCOUNT: ", SERVICE_ACCOUNT_PATH)
QUESTION_LABELS = {
    "q1_full_name": "–§–ò–û",
    "q2_birth_date": "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
    "q3_gender": "–ü–æ–ª",
    "q4_phone_number": "–¢–µ–ª–µ—Ñ–æ–Ω",
    "q5_telegram_username": "Telegram",
    "q6_region": "–†–µ–≥–∏–æ–Ω",
    "q7_who_applies": "–ö—Ç–æ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∑–∞ –ø–æ–º–æ—â—å—é",
    "q8_is_sabodarmon": "–ü–∞—Ü–∏–µ–Ω—Ç Sabo?",
    "q9_source_info": "–ö–∞–∫ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?",
    "q10_has_diagnosis": "–ï—Å—Ç—å –ª–∏ –¥–∏–∞–≥–Ω–æ–∑?",
    "q11_diagnosis_text": "–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑",
    "q13_complaint": "–ö–∞–∫–∏–µ –∂–∞–ª–æ–±—ã?",
    "q14_main_discomfort": "–ß—Ç–æ –º–µ—à–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
    "q15_improvements": "–ß—Ç–æ —É–ª—É—á—à–∏—Ç—Å—è –ø–æ—Å–ª–µ –ª–µ—á–µ–Ω–∏—è?",
    "q16_consequences": "–ß—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ –Ω–µ –ª–µ—á–∏—Ç—å—Å—è?",
    "q17_need_confirmation": "–ù—É–∂–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã?",
    "q18_avg_income": "–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –Ω–∞ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏ (–≤ –º–ª–Ω —Å—É–º)",
    "q19_children_count": "–°–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π –≤ —Å–µ–º—å–µ?",
    "q21_family_work": "–ö—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–µ–º—å–µ?",
    "q22_housing_type": "–ö–∞–∫–æ–µ —É –≤–∞—Å –∂–∏–ª—å—ë?",
    # "q23_contribution": "–ö–∞–∫—É—é —Å—É–º–º—É –≤—ã –≥–æ—Ç–æ–≤—ã –≤–Ω–µ—Å—Ç–∏?",
    "q25_final_comment": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ",

    # –§–∞–π–ª—ã
    "q12_diagnosis_file_id": "üìé –î–∏–∞–≥–Ω–æ–∑ (—Ñ–∞–π–ª)",
    "q17_confirmation_file": "üìé –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (—Ñ–∞–π–ª)",
    "q18_income_doc": "üìé –°–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö (—Ñ–∞–π–ª)",
    "q19_children_docs": "üìé –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –¥–µ—Ç–µ–π (—Ñ–∞–π–ª—ã)",
    "q22_housing_doc": "üìé –î–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –∂–∏–ª—å—ë (—Ñ–∞–π–ª)",
    "q24_additional_file": "üìé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª",
}

QUESTION_FILE_KEYS = {
    "q12_diagnosis_file_id": "üìé –î–∏–∞–≥–Ω–æ–∑ (—Ñ–∞–π–ª)",
    "q17_confirmation_file": "üìé –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (—Ñ–∞–π–ª)",
    "q18_income_doc": "üìé –°–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö (—Ñ–∞–π–ª)",
    "q19_children_docs": "üìé –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –¥–µ—Ç–µ–π (—Ñ–∞–π–ª—ã)",
    "q22_housing_doc": "üìé –î–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –∂–∏–ª—å—ë (—Ñ–∞–π–ª)",
    "q24_additional_file": "üìé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª",
}

def get_drive_service():
    if not SERVICE_ACCOUNT_PATH:
        raise ValueError("‚ùå GOOGLE_DRIVE_SERVICE_ACCOUNT_PATH not set in .env file")
    
    if not os.path.exists(SERVICE_ACCOUNT_PATH):
        raise FileNotFoundError(f"‚ùå Service account file not found: {SERVICE_ACCOUNT_PATH}")
    
    creds = ServiceAccountCredentials.from_service_account_file(SERVICE_ACCOUNT_PATH, scopes=SCOPES)
    return build('drive', 'v3', credentials=creds)

def create_folder(name: str, parent_id: str = None) -> str:
    service = get_drive_service()
    metadata = {'name': name, 'mimeType': 'application/vnd.google-apps.folder'}
    if parent_id:
        metadata['parents'] = [parent_id]
    folder = service.files().create(body=metadata, fields='id').execute()
    return folder['id']

def upload_file_to_folder(file_bytes: bytes, filename: str, mime_type: str, folder_id: str) -> str:
    service = get_drive_service()
    metadata = {'name': filename, 'parents': [folder_id]}
    media = MediaIoBaseUpload(io.BytesIO(file_bytes), mimetype=mime_type)
    uploaded_file = service.files().create(body=metadata, media_body=media, fields='id').execute()
    return uploaded_file['id']

def upload_text_to_drive(content: str, filename: str, folder_id: str = None) -> str:
    service = get_drive_service()
    metadata = {'name': filename, 'mimeType': 'text/plain'}
    if folder_id:
        metadata['parents'] = [folder_id]
    media = MediaIoBaseUpload(io.BytesIO(content.encode('utf-8')), mimetype='text/plain')
    file = service.files().create(body=metadata, media_body=media, fields='id').execute()
    return file['id']

async def save_file_by_id(file_id: str, folder_id: str, filename: str, bot: Bot, user_id: int = None):
    try:
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_bytes = await bot.download_file(file_path)
        ext = os.path.splitext(file_path)[-1] or ".bin"

        mime_type = "application/octet-stream"
        if ext.lower() in ['.jpg', '.jpeg']:
            mime_type = "image/jpeg"
        elif ext.lower() == '.png':
            mime_type = "image/png"
        elif ext.lower() == '.pdf':
            mime_type = "application/pdf"
        elif ext.lower() in ['.doc', '.docx']:
            mime_type = "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        elif ext.lower() == '.txt':
            mime_type = "text/plain"

        log_user_action(
            user_id=user_id,
            action="Uploading file",
            state="save_file_by_id",
            extra_data=f"Filename: {filename}{ext}, FolderID: {folder_id}"
        )

        return upload_file_to_folder(file_bytes.read(), f"{filename}{ext}", mime_type, folder_id)

    except Exception as e:
        log_error(
            user_id=user_id,
            error=e,
            action="Failed to upload file",
            state="save_file_by_id",
        )
        print(f"Error saving file {file_id}: {e}")
        raise


async def save_full_questionnaire_to_drive(user_data: dict, bot: Bot, folder_id: str, user_id: int = None):
    try:
        full_name = user_data.get('q1_full_name', '–ü–∞—Ü–∏–µ–Ω—Ç')
        root_folder_id = folder_id

        text_parts = []

        if full_name:
            text_parts.append(f"–§–ò–û: {full_name}")

        for key, value in user_data.items():
            if key == "q1_full_name" or key == "full_name":
                continue
            label = QUESTION_LABELS.get(key, key)

            if key in QUESTION_FILE_KEYS:
                if isinstance(value, list):
                    text_parts.append(f"{label}: {len(value)} —Ñ–∞–π–ª(–æ–≤) ‚úÖ")
                else:
                    text_parts.append(f"{label}: –ï—Å—Ç—å —Ñ–∞–π–ª ‚úÖ" if value else f"{label}: ‚Äî")
            else:
                text_parts.append(f"{label}: {value}")

        full_text = "\n".join(text_parts)

        log_user_action(
            user_id=user_id,
            action="Uploading questionnaire summary",
            state="save_full_questionnaire_to_drive",
            extra_data="–ê–Ω–∫–µ—Ç–∞.txt"
        )

        upload_text_to_drive(full_text, "–ê–Ω–∫–µ—Ç–∞.txt", folder_id=root_folder_id)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
        for field, folder_name in QUESTION_FILE_KEYS.items():
            file_value = user_data.get(field)
            if not file_value:
                continue

            subfolder_id = create_folder(folder_name, parent_id=root_folder_id)

            log_user_action(
                user_id=user_id,
                action="Created subfolder for attachments",
                state="save_full_questionnaire_to_drive",
                extra_data=f"{folder_name} (Field: {field})"
            )

            if isinstance(file_value, list):
                for idx, file_id in enumerate(file_value):
                    if file_id:
                        await save_file_by_id(file_id, subfolder_id, f"{folder_name}_{idx+1}", bot, user_id)
            else:
                await save_file_by_id(file_value, subfolder_id, folder_name, bot, user_id)

        log_user_action(
            user_id=user_id,
            action="Finished saving questionnaire",
            state="save_full_questionnaire_to_drive"
        )

    except Exception as e:
        log_error(
            user_id=user_id,
            error=e,
            action="Error saving questionnaire",
            state="save_full_questionnaire_to_drive",
        )
        print(f"‚ùå Error in save_full_questionnaire_to_drive: {e}")
        raise



def delete_folder(folder_id: str):
    try:
        service = get_drive_service()
        service.files().delete(fileId=folder_id).execute()
        print(f"‚úÖ –ü–∞–ø–∫–∞ —Å ID {folder_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        return True
    except HttpError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}")
        return False
