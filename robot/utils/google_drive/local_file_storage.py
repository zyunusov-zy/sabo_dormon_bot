import os
import asyncio
from pathlib import Path
from aiogram import Bot
import pandas as pd
from robot.utils.misc.logging import log_handler, log_user_action, log_state_change, log_error, log_file_operation

# –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∞–Ω–∫–µ—Ç
BASE_STORAGE_PATH = "questionnaire_storage"

QUESTION_LABELS = {
    "q1_full_name": "–§–ò–û",
    "q2_birth_date": "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
    "q3_gender": "–ü–æ–ª",
    "q4_phone_number": "–¢–µ–ª–µ—Ñ–æ–Ω",
    "q5_telegram_username": "Telegram",
    "q6_region": "–†–µ–≥–∏–æ–Ω",
    "q7_who_applies": "–ö—Ç–æ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∑–∞ –ø–æ–º–æ—â—å—é",
    "q8_is_sabodarmon": "–ü–∞—Ü–∏–µ–Ω—Ç Sabo?",
    "q9_source_info": "–ö–∞–∫ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?",
    "q10_has_diagnosis": "–ï—Å—Ç—å –ª–∏ –¥–∏–∞–≥–Ω–æ–∑?",
    "q11_diagnosis_text": "–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑",
    "q13_complaint": "–ö–∞–∫–∏–µ –∂–∞–ª–æ–±—ã?",
    "q14_main_discomfort": "–ß—Ç–æ –º–µ—à–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
    "q15_improvements": "–ß—Ç–æ —É–ª—É—á—à–∏—Ç—Å—è –ø–æ—Å–ª–µ –ª–µ—á–µ–Ω–∏—è?",
    "q16_consequences": "–ß—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ –Ω–µ –ª–µ—á–∏—Ç—å—Å—è?",
    "q17_need_confirmation": "–ù—É–∂–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã?",
    "q18_avg_income": "–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –Ω–∞ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏ (–≤ –º–ª–Ω —Å—É–º)",
    "q19_children_count": "–°–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π –≤ —Å–µ–º—å–µ?",
    "q21_family_work": "–ö—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–µ–º—å–µ?",
    "q22_housing_type": "–ö–∞–∫–æ–µ —É –≤–∞—Å –∂–∏–ª—å—ë?",
    "q23_diagnosis_confirm": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ–∑–∞",
    "q25_final_comment": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ",

    # –§–∞–π–ª—ã
    "q12_diagnosis_file_id": "üìé –î–∏–∞–≥–Ω–æ–∑ (—Ñ–∞–π–ª)",
    "q17_confirmation_file": "üìé –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (—Ñ–∞–π–ª)",
    "q18_income_doc": "üìé –°–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö (—Ñ–∞–π–ª)",
    "q19_children_docs": "üìé –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –¥–µ—Ç–µ–π (—Ñ–∞–π–ª—ã)",
    "q22_housing_doc": "üìé –î–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –∂–∏–ª—å—ë (—Ñ–∞–π–ª)",
    "q24_additional_file": "üìé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª",
}

QUESTION_FILE_KEYS = {
    "q12_diagnosis_file_id": "üìé –î–∏–∞–≥–Ω–æ–∑ (—Ñ–∞–π–ª)",
    "q17_confirmation_file": "üìé –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (—Ñ–∞–π–ª)",
    "q18_income_doc": "üìé –°–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö (—Ñ–∞–π–ª)",
    "q19_children_docs": "üìé –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –¥–µ—Ç–µ–π (—Ñ–∞–π–ª—ã)",
    "q22_housing_doc": "üìé –î–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –∂–∏–ª—å—ë (—Ñ–∞–π–ª)",
    "q24_additional_file": "üìé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª",
}

def create_safe_filename(name: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏, —É–±–∏—Ä–∞—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"""
    unsafe_chars = '<>:"/\\|?*'
    safe_name = name
    for char in unsafe_chars:
        safe_name = safe_name.replace(char, '_')
    return safe_name

def create_local_folder(name: str, parent_path: str = None) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –Ω–µ–π"""
    if parent_path is None:
        parent_path = BASE_STORAGE_PATH
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    Path(parent_path).mkdir(parents=True, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –ø–∞–ø–∫–∏
    safe_name = create_safe_filename(name)
    folder_path = os.path.join(parent_path, safe_name)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
    Path(folder_path).mkdir(parents=True, exist_ok=True)
    
    return folder_path

def save_questionnaire_to_excel(user_data: dict, folder_path: str, filename: str = "–ê–Ω–∫–µ—Ç–∞.xlsx") -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–∫–µ—Ç—É –≤ Excel —Ñ–∞–π–ª —Å –¥–≤—É–º—è —Å—Ç–æ–ª–±—Ü–∞–º–∏: –í–æ–ø—Ä–æ—Å –∏ –û—Ç–≤–µ—Ç"""
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        questions = []
        answers = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –§–ò–û –ø–µ—Ä–≤—ã–º
        full_name = user_data.get('q1_full_name', '')
        if full_name:
            questions.append("–§–ò–û")
            answers.append(full_name)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        for key, value in user_data.items():
            if key == "q1_full_name" or key == "full_name":
                continue
                
            label = QUESTION_LABELS.get(key, key)

            if key in QUESTION_FILE_KEYS:
                # –î–ª—è —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è
                if isinstance(value, list):
                    answer = f"{len(value)} —Ñ–∞–π–ª(–æ–≤) ‚úÖ" if value else "‚Äî"
                else:
                    answer = "–ï—Å—Ç—å —Ñ–∞–π–ª ‚úÖ" if value else "‚Äî"
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                answer = str(value) if value is not None else "‚Äî"
            
            questions.append(label)
            answers.append(answer)

        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame({
            '–í–æ–ø—Ä–æ—Å': questions,
            '–û—Ç–≤–µ—Ç': answers
        })

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        excel_path = os.path.join(folder_path, filename)
        
        # –°–æ–∑–¥–∞–µ–º Excel writer —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–ê–Ω–∫–µ—Ç–∞', index=False)
            
            # –ü–æ–ª—É—á–∞–µ–º worksheet –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            worksheet = writer.sheets['–ê–Ω–∫–µ—Ç–∞']
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
            worksheet.column_dimensions['A'].width = 45  # –°—Ç–æ–ª–±–µ—Ü "–í–æ–ø—Ä–æ—Å"
            worksheet.column_dimensions['B'].width = 65  # –°—Ç–æ–ª–±–µ—Ü "–û—Ç–≤–µ—Ç"
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            from openpyxl.styles import Alignment, Border, Side, PatternFill, Font
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏
            header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")  # –°–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            header_font = Font(color="FFFFFF", bold=True, size=12)  # –ë–µ–ª—ã–π –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
            
            question_fill = PatternFill(start_color="E7E6E6", end_color="E7E6E6", fill_type="solid")  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
            question_font = Font(bold=True, size=11)  # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
            
            answer_fill = PatternFill(start_color="FFFFFF", end_color="FFFFFF", fill_type="solid")  # –ë–µ–ª—ã–π –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
            answer_font = Font(size=11)  # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
            thin_border = Border(
                left=Side(style='thin', color='000000'),
                right=Side(style='thin', color='000000'),
                top=Side(style='thin', color='000000'),
                bottom=Side(style='thin', color='000000')
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
            for col in range(1, 3):  # –°—Ç–æ–ª–±—Ü—ã A –∏ B
                cell = worksheet.cell(row=1, column=col)
                cell.fill = header_fill
                cell.font = header_font
                cell.border = thin_border
                cell.alignment = Alignment(wrap_text=True, vertical='center', horizontal='center')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            for row in range(2, len(df) + 2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
                # –°—Ç–æ–ª–±–µ—Ü A (–í–æ–ø—Ä–æ—Å—ã) - —Å–µ—Ä—ã–π —Ñ–æ–Ω
                question_cell = worksheet.cell(row=row, column=1)
                question_cell.fill = question_fill
                question_cell.font = question_font
                question_cell.border = thin_border
                question_cell.alignment = Alignment(wrap_text=True, vertical='top', horizontal='left')
                
                # –°—Ç–æ–ª–±–µ—Ü B (–û—Ç–≤–µ—Ç—ã) - –±–µ–ª—ã–π —Ñ–æ–Ω
                answer_cell = worksheet.cell(row=row, column=2)
                answer_cell.fill = answer_fill
                answer_cell.font = answer_font
                answer_cell.border = thin_border
                answer_cell.alignment = Alignment(wrap_text=True, vertical='top', horizontal='left')
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for row in range(1, len(df) + 2):
                worksheet.row_dimensions[row].height = 25

        return excel_path

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Excel: {e}")
        raise

def save_text_to_local_file(content: str, filename: str, folder_path: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    safe_filename = create_safe_filename(filename)
    file_path = os.path.join(folder_path, safe_filename)
    
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    return file_path

async def save_telegram_file_locally(file_id: str, folder_path: str, filename: str, bot: Bot, user_id: int = None) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Telegram –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ"""
    try:
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_bytes = await bot.download_file(file_path)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        ext = os.path.splitext(file_path)[-1] or ".bin"
        safe_filename = create_safe_filename(filename) + ext
        
        local_file_path = os.path.join(folder_path, safe_filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(local_file_path, 'wb') as f:
            f.write(file_bytes.read())
        
        log_user_action(
            user_id=user_id,
            action="File saved locally",
            state="save_telegram_file_locally",
            extra_data=f"File: {safe_filename}, Path: {local_file_path}"
        )
        
        return local_file_path

    except Exception as e:
        log_error(
            user_id=user_id,
            error=e,
            action="Failed to save file locally",
            state="save_telegram_file_locally",
        )
        print(f"‚ùå Error saving file {file_id}: {e}")
        raise

async def save_full_questionnaire_locally(user_data: dict, bot: Bot, user_id: int = None) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—é –∞–Ω–∫–µ—Ç—É –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É —Å Excel —Ñ–∞–π–ª–æ–º"""
    try:
        full_name = user_data.get('q1_full_name', '–ü–∞—Ü–∏–µ–Ω—Ç')
        birth_date = user_data.get('q2_birth_date', 'Unknown')
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
        folder_name = f"–ê–Ω–∫–µ—Ç–∞_–ø–∞—Ü–∏–µ–Ω—Ç–∞_{full_name}_{birth_date}"
        patient_folder_path = create_local_folder(folder_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É –≤ Excel —Ñ–æ—Ä–º–∞—Ç–µ
        excel_file_path = save_questionnaire_to_excel(user_data, patient_folder_path)
        
        log_user_action(
            user_id=user_id,
            action="Questionnaire Excel saved locally",
            state="save_full_questionnaire_locally",
            extra_data=f"File: {excel_file_path}"
        )

        # –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é –ø–∞–ø–∫—É –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        files_folder_path = create_local_folder("–§–∞–π–ª—ã", parent_path=patient_folder_path)
        
        log_user_action(
            user_id=user_id,
            action="Created files folder for patient",
            state="save_full_questionnaire_locally",
            extra_data=f"Files folder: {files_folder_path}"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã-–≤–ª–æ–∂–µ–Ω–∏—è
        for field, folder_name in QUESTION_FILE_KEYS.items():
            file_value = user_data.get(field)
            if not file_value:
                continue

            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ "–§–∞–π–ª—ã"
            subfolder_path = create_local_folder(folder_name, parent_path=files_folder_path)
            
            log_user_action(
                user_id=user_id,
                action="Created subfolder for attachments",
                state="save_full_questionnaire_locally",
                extra_data=f"{folder_name} (Field: {field})"
            )

            if isinstance(file_value, list):
                # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
                for idx, file_id in enumerate(file_value):
                    if file_id:
                        await save_telegram_file_locally(
                            file_id, 
                            subfolder_path, 
                            f"{folder_name}_{idx+1}", 
                            bot, 
                            user_id
                        )
            else:
                # –ï—Å–ª–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª
                await save_telegram_file_locally(
                    file_value, 
                    subfolder_path, 
                    folder_name, 
                    bot, 
                    user_id
                )

        log_user_action(
            user_id=user_id,
            action="Finished saving questionnaire locally",
            state="save_full_questionnaire_locally",
            extra_data=f"Patient folder: {patient_folder_path}"
        )
        
        return patient_folder_path

    except Exception as e:
        log_error(
            user_id=user_id,
            error=e,
            action="Error saving questionnaire locally",
            state="save_full_questionnaire_locally",
        )
        print(f"‚ùå Error in save_full_questionnaire_locally: {e}")
        raise

def delete_local_folder(folder_path: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É —Å–æ –≤—Å–µ–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"""
    try:
        import shutil
        if os.path.exists(folder_path):
            shutil.rmtree(folder_path)
            print(f"‚úÖ –ü–∞–ø–∫–∞ {folder_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            return True
        else:
            print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ {folder_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}")
        return False

def get_patient_folder_path(full_name: str, birth_date: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    folder_name = f"–ê–Ω–∫–µ—Ç–∞_–ø–∞—Ü–∏–µ–Ω—Ç–∞_{create_safe_filename(full_name)}_{birth_date}"
    return os.path.join(BASE_STORAGE_PATH, folder_name)

def list_all_questionnaires() -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç"""
    if not os.path.exists(BASE_STORAGE_PATH):
        return []
    
    questionnaires = []
    for item in os.listdir(BASE_STORAGE_PATH):
        item_path = os.path.join(BASE_STORAGE_PATH, item)
        if os.path.isdir(item_path):
            questionnaires.append({
                'name': item,
                'path': item_path,
                'created': os.path.getctime(item_path)
            })
    
    return sorted(questionnaires, key=lambda x: x['created'], reverse=True)